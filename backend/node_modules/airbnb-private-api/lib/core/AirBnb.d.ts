import { Response } from 'request';
import { AirBnbConstructor, Session, Reservations, AirBnbClass, SearchListing } from '../types';
import { SessionManager } from './SessionManager';
export declare class AirBnbClient<T extends AirBnbConstructor> extends SessionManager implements AirBnbClass {
    email: string;
    phone: string;
    password: string;
    auth_token: string;
    proxy: string;
    currency: string;
    locale: string;
    session: Session;
    authenticated: boolean;
    valid_store: boolean;
    constructor({ email, phone, password, auth_token, proxy, currency, locale, session_store, session_path, }: T);
    private _request;
    _authentication_by_email(): Promise<unknown>;
    _send_auth_code_to_phone(): Promise<any>;
    _authentication_by_phone(code: number): Promise<any>;
    private _authentication;
    _get_my_profile(): Promise<Response>;
    _get_user_profile(user_id: number): Promise<Response>;
    _get_wishlists({ _offset, _limit }: {
        _offset?: number | undefined;
        _limit?: number | undefined;
    }): Promise<Response>;
    _get_listings({ id, _limit }: {
        id?: number | undefined;
        _limit?: number | undefined;
    }): Promise<Response>;
    _messaging_syncs({ type, _limit }: {
        type?: string | undefined;
        _limit?: number | undefined;
    }): Promise<unknown>;
    _get_threads_full({ _limit, type }: {
        _limit?: number | undefined;
        type?: string | undefined;
    }): Promise<unknown>;
    _get_threads_ids({ _limit, _offset, type }: {
        _limit?: number | undefined;
        _offset?: number | undefined;
        type?: string | undefined;
    }): Promise<unknown>;
    _get_thread_by_id({ id }: {
        id: any;
    }): Promise<unknown>;
    private _threads;
    _update_calendar_note({ listing_id, dates, notes }: {
        listing_id: any;
        dates: any;
        notes: any;
    }): Promise<Response>;
    _update_calendar_smart_pricing({ listing_id, active, dates }: {
        listing_id: any;
        active: any;
        dates: any;
    }): Promise<Response>;
    _update_calendar_availability({ listing_id, availability, dates }: {
        listing_id: any;
        availability: any;
        dates: any;
    }): Promise<Response>;
    _update_calendar_price({ listing_id, daily_price, dates }: {
        listing_id: any;
        daily_price: any;
        dates: any;
    }): Promise<Response>;
    private _update_calendar;
    _get_host_pricing_calculators({ check_in, check_out, listing_id }: {
        check_in: any;
        check_out: any;
        listing_id: any;
    }): Promise<Response>;
    _get_reservations({ _limit, _offset, start_date, end_date, order_by, include_accept, include_canceled, include_checkpoint, include_pending, }: Reservations): Promise<Response>;
    _get_reservation_details(reservation_id: string): Promise<Response>;
    _get_listings_from_search({ adults, children, infants, checkin, checkout, _offset, _limit, query, is_guided_search, amenities, ib, price_min, price_max, min_bathrooms, min_bedrooms, min_beds, superhost, room_types, }: SearchListing): Promise<any>;
}
