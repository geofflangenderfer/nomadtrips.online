'use strict';
var __decorate =
    (this && this.__decorate) ||
    function(decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
            d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function') r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
var __metadata =
    (this && this.__metadata) ||
    function(k, v) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function') return Reflect.metadata(k, v);
    };
Object.defineProperty(exports, '__esModule', { value: true });
const bluebird_1 = require('bluebird');
const fs_1 = require('fs');
const os_1 = require('os');
const decorators_1 = require('../decorators');
class SessionManager {
    constructor({ session_store, session_path, session, email, phone, auth_token = '', currency = '', locale = '', authenticated, valid_store }) {
        this.session_store = session_store;
        this.session_path = session_path || `${os_1.homedir()}/Downloads`;
        this.session = session;
        this.email = email;
        this.phone = phone;
        this.auth_token = auth_token;
        this.currency = currency;
        this.locale = locale;
        this.authenticated = authenticated;
        this.valid_store = valid_store;
    }
    _validate_store() {
        return new Promise(async (resolve, reject) => {
            switch (this.session_store) {
                case 'file':
                    try {
                        await bluebird_1.fromCallback(cb => fs_1.mkdir(this.session_path, { recursive: true }, cb));
                        await bluebird_1.fromCallback(cb => fs_1.access(this.session_path, fs_1.constants.W_OK | fs_1.constants.R_OK, cb));
                        this.valid_store = true;
                        resolve();
                    } catch (error) {
                        reject(error);
                    }
                    break;
            }
        });
    }
    _save_session() {
        return new Promise(async (resolve, reject) => {
            switch (this.session_store) {
                case 'file':
                    try {
                        return resolve(
                            await bluebird_1.fromCallback(cb =>
                                fs_1.writeFile(
                                    `${this.session_path}/${this.email ? this.email : this.phone}.json`,
                                    JSON.stringify({
                                        token: this.auth_token,
                                        advertising_id: this.session.advertising_id,
                                        device: {
                                            id: this.session.device.id,
                                            screen_size: this.session.device.screen_size,
                                            fingerprint: this.session.device.fingerprint,
                                            country: this.session.device.country,
                                        },
                                        user_agent: this.session.user_agent,
                                        user: {
                                            user_id: this.session.user.user_id,
                                            currency: this.currency,
                                            locale: this.locale,
                                        },
                                    }),
                                    { flag: 'w' },
                                    cb,
                                ),
                            ),
                        );
                    } catch (error) {
                        return reject(error);
                    }
            }
        });
    }
    _load_session() {
        return new Promise(async (resolve, reject) => {
            if (!this.valid_store) {
                try {
                    await this._validate_store();
                } catch (error) {
                    return reject(error);
                }
            }
            try {
                switch (this.session_store) {
                    case 'file':
                        const session_store = await bluebird_1.fromCallback(cb =>
                            fs_1.readFile(`${this.session_path}/${this.email ? this.email : this.phone}.json`, { encoding: 'utf-8' }, cb),
                        );
                        this.session = JSON.parse(session_store);
                        this.auth_token = this.session.token;
                        this.authenticated = true;
                        resolve();
                        break;
                }
            } catch (error) {
                reject(error);
            }
        });
    }
}
__decorate(
    [
        decorators_1.requiredArguments(['email|phone']),
        __metadata('design:type', Function),
        __metadata('design:paramtypes', []),
        __metadata('design:returntype', Promise),
    ],
    SessionManager.prototype,
    '_load_session',
    null,
);
exports.SessionManager = SessionManager;
